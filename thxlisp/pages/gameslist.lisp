(defun cards-view(lista)
  (fmt "~{<img src='/images/primalogs/~A.gif' height='80px'>~}" lista))


(define-easy-handler (gameslist :uri "/primalogs/gameslist") (tn year month day)
  (page "Gameslist"
    (when (and year month day (eq *selector* 'year))
      (setq *log-games1* nil *logyear* year *logmonth* month *logday* day)
      (dolist (mnth (get-log-months *logyear*))
      (dolist (days (get-log-days *logyear* mnth))
	(dolist (tables (get-log-tables *logyear* mnth days))
	  (dolist (l (get-log-games *logyear* mnth days tables)) 
	    (when l (push (read-log l *logyear* mnth days tables) *log-games1*))   )))))
    (when (and year month day (eq *selector* 'month))
      (setq *log-games1* nil *logyear* year *logmonth* month *logday* day)
      (dolist (days (get-log-days *logyear* *logmonth*))
	(dolist (tables (get-log-tables *logyear* *logmonth* days))
	  (dolist (l (get-log-games *logyear* *logmonth* days tables)) 
	    (when l (push (read-log l *logyear* *logmonth* days tables) *log-games1*))   ))))    
    (when (and year month day (eq *selector* 'day))
      (setq *log-games1* nil *logyear* year *logmonth* month *logday* day)
      (dolist (tables (get-log-tables *logyear* *logmonth* *logday*))
	(dolist (l (get-log-games *logyear* *logmonth* *logday* tables)) 
	  (when l (push (read-log l *logyear* *logmonth* *logday* tables) *log-games1*)) )))
    (when (and tn (eq *selector* 'tname))
      (setq *logtablename* tn *log-games1* nil)
      (dolist (l (sort 
		  (get-log-games *logyear* *logmonth* *logday* *logtablename*) 
		  #'string<))
	(when l (push (read-log l) *log-games1*) )) )
    (when *logday*
      (out "<h2>selected day:" *logday* (cdr (assoc *logmonth* *monthnames* :test #'equal)) "</h2>"))
    (if (eq *selector* 'tname)
	(out "<h1>" (third (second(log-history (car *log-games1*)))) "$" *logtablename* "</h1>")
	(out "<h2>" (length *log-games1*) "games loaded ... </h2>"))
      (when (eq *selector* 'tname)
	(dolist (g *log-games1*)
	  (a (:href (fmt "/primalogs/showgame?id=~A" (log-id g))) (log-date g))
	  (out (cards-view (log-holecards g)) (log-balance g) (if (log-shown g) "[S]" "") )
	  (out "<br>") )))        )