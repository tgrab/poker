
(defun wh-card(card)
  (let ((rank (char card 0))
	(kolor (char card 1)))
  (+
   (cond 
     ((eq #\2 rank) 13)
     ((eq #\3 rank) 12)
     ((eq #\4 rank) 11)
     ((eq #\5 rank) 10)
     ((eq #\6 rank) 9)
     ((eq #\7 rank) 8)
     ((eq #\8 rank) 7)
     ((eq #\9 rank) 6)
     ((eq #\T rank) 5)
     ((eq #\J rank) 4)
     ((eq #\Q rank) 3)
     ((eq #\K rank) 2)
     ((eq #\A rank) 1)
     (t 0)    )

  (* 13
     (cond 
       ((eq #\c kolor) 3)
       ((eq #\d kolor) 2)
       ((eq #\h kolor) 1)
       ((eq #\s kolor) 0)
       (t 0)))     )))


(defun zakoduj-date(dzien godzina)
  ;(zakoduj-date "2008/04/02" "23:34:41")
  (destructuring-bind (rok mies dzien godz min sek)
		      (mapcar #'read-from-string
			      (tokens (concatenate 'string dzien "/" godzina) '(#\/ #\:)))
    (encode-universal-time sek min godz dzien mies rok)))

(defun whlog->game(filename)
  (macrolet ((player () '(clean-var (get-var ?who) #\:))
	     (amount () '(let ((a (get-var ?amount)))
			  (if (digit-char-p (char a 0))
			      (read-from-string a)
			      (read-from-string (subseq a 1)))))
	     (karta (c) `(wh-card (clean-var (get-var ,c) '(#\[ #\])))))
  (with-open-file (f filename)
    (do ((line (read-line f nil 'end) (read-line f nil 'end)))
	((eq line 'end))
      #+cmu(setq line (remove-return line))
       (with-pattern '("Game" ?id ?kind ??)
	 (when (not (string= "Omaha" (get-var ?kind)))
	   (return-from whlog->game nil)))      
      (or

       (with-pattern '("Game" ?id ?kind ?limit ?stakes "-" ?day "-" ?hour "(UK)")
	 ;(print pat)
	 (new-game :id (clean-var (get-var ?id) '(#\: #\#)) :with-rules nil)
	 (setf (agent-name +game+) "Grabol")
	 (setf (czas +game+) (zakoduj-date (get-var ?day)(get-var ?hour))))
       (with-pattern '("Seat" ?nr ?who ?amount "in" "chips)")
	 (push (cons (get-var ?who) (read-from-string (subseq (get-var ?amount) 2))) (money-log +game+)))
       (with-pattern '("Table" ?name ??)
	(setf (table-name +game+) (string-trim '(#\")(get-var ?name))) )
       (with-pattern '(?who "collected" ?amount "from" "Main" "pot")
	(push (cons (get-var ?who) (read-from-string (subseq (get-var ?amount) 1))) (winners-log +game+)) )
       (with-pattern '("Returned" "uncalled" "bets" ?amount "to" ?who)
	(push (cons (get-var ?who) (read-from-string (subseq (get-var ?amount) 1))) (uncalled-bets +game+)) )
       (with-pattern '(?who posts small blind ?amount)
	(small-blind (player) (amount)))
      (with-pattern '(?who posts big blind ?amount)
	(big-blind (player) (amount)))
      (with-pattern '("dealt" "to" "Grabol" ?c1 ?c2 ?c3 ?c4)
	(holecards  (karta ?c1)  (karta ?c2) (karta ?c3) (karta ?c4) :with-rules nil))
      (with-pattern '(?who "folds")
	(fold (player) ))
      (with-pattern '(?who "calls" ?amount)
	(call (player) (amount) ))
      (with-pattern '(?who "checks")
	(call (player) 0 ))
      (with-pattern '(?who "bets" ?amount)
	(bet (player) (amount) ))
      (with-pattern '(?who "raises" "to" ?amount)
	(bet (player) (amount) 'r ))
      (with-pattern '(?who "raises" "to" ?amount "and" "is" "all-in")
	(allin (player) (amount) ))
      (with-pattern '(?who  "is" "all-in" ?amount)
	(allin (player) (amount) ))
      (with-pattern '(?who "bets"  ?amount "and" "is" "all-in")
	(allin (player) (amount) ))
      (with-pattern '("-----" "FLOP" "-----" ?c1 ?c2 ?c3)
	(flop  (karta ?c1)  (karta ?c2) (karta ?c3)  :with-rules nil))
      (with-pattern '("-----" "TURN" "-----" ?c1 ?c2 ?c3)
	(turn  (wh-card (car (last (tokens (get-var ?c3) '(#\[ #\]))))) :with-rules nil ))
      (with-pattern '("-----" "RIVER" "-----" ?c1 ?c2 ?c3 ?c4)
	(river  (wh-card (car (last (tokens (get-var ?c4) '(#\[ #\]))))) :with-rules nil ))

      (with-pattern '(?who "shows" ?c1 ?c2 ?c3 ?c4 ??)
	(push (cons (player)
		    (list (karta ?c1)  (karta ?c2) (karta ?c3) (karta ?c4)))
	      (cards-log +game+)))
      (with-pattern '(?who "mucks" "hand" ?c1 ?c2 ?c3 ?c4)
	(push (cons (player)
		    (list (karta ?c1)  (karta ?c2) (karta ?c3) (karta ?c4)))
	      (cards-log +game+)))
       ))))
  'ok)

(let ((old-files nil))
  (defun clear-wh-dir-old-files() (setq old-files nil))
  (defun read-wh-dir-old-files() old-files)
  (defun read-wh-dir(&optional (d "/raid/temp/pokerlogs/wh/*.log"))
    (let ((games nil))
      (dolist (f (directory d) games)
	(when (and (plusp (length  (pathname-name f)))
		   (not (find (pathname-name f) old-files :test #'string=)))
	  (let ((znak (char-code (char (pathname-name f) (1- (length  (pathname-name f)))))))
	    (when (and (>= znak 48) (<= znak 57))
	      (print f)
	      (push (pathname-name f) old-files)
	      (when (whlog->game f)
		(print (id +game+))
		(push +game+ *games-list*)
		(create-infos (car *games-list*)))))))))     )


(defun read-wh-dir-real()
  (read-wh-dir (format nil "~A/*.log" (view-get-dir))))